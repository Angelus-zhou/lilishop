apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: lilishop-middleware
  labels:
    app.kubernetes.io/name: mysql-service
    app.kubernetes.io/instance: mysql-single
    app.kubernetes.io/version: "8.0.33"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lilishop
    tier : "middleware"
spec:
  type: NodePort
  ports:
    - name: "3306"
      nodePort: 30306
      port: 3306
      targetPort: mysql
  selector:
    lilishop.service: mysql
status:
  loadBalancer: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-config
  namespace: lilishop-middleware
  labels:
    app.kubernetes.io/name: mysql-db-config
    app.kubernetes.io/instance: mysql-single
    app.kubernetes.io/version: "8.0.33"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lilishop
data:
  my.cnf: |
    [mysqld]
    user=mysql
    default-storage-engine=INNODB
    character-set-client-handshake=FALSE
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci
    init_connect='SET NAMES utf8mb4'
    group_concat_max_len=4294967295
    max_connections=5000
    log-bin=mysql-bin # 开启 binlog
    binlog-format=ROW # 选择 ROW 模式
    server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复
    [client]
    default-character-set=utf8mb4
    [mysql]
    default-character-set=utf8mb4

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: mysql-single
    app.kubernetes.io/version: "8.0.33"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lilishop
    tier : "middleware"
  name: mysql
  namespace: lilishop-middleware
spec:
  serviceName: mysql
  replicas: 1
  selector:
    matchLabels:
      lilishop.service: mysql
  template:
    metadata:
      labels:
        lilishop.service: mysql
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: lilishop
            - name: TZ
              value: Asia/Shanghai
          image: mysql:8.0.33
          name: mysql
          ports:
            - name: mysql
              containerPort: 3306
          resources: {}
          volumeMounts:
          # 运行 mysql 容器时，docker-entrypoint.sh会检查 mysql 目录是否/var/lib/mysql存在。如果该目录不存在（第一次运行），它将运行 docker-entrypoint.sh 文件。
            - name: mysql-db-volumes
              mountPath: /docker-entrypoint-initdb.d
            - name: mysql-data-volumes
              mountPath: /var/lib/mysql
            - name: mysql-config-volumes
              mountPath: /etc/mysql/conf.d/my.cnf
              subPath: my.cnf
      restartPolicy: Always
      volumes:
        - name: mysql-data-volumes
          hostPath:
            path: /root/docker/kubernetes/data/middleware/mysql
            type: Directory
        - name: mysql-config-volumes
          configMap:
            name: mysql-db-config
            items:
              - key: my.cnf
                path: my.cnf
        - name: mysql-db-volumes
          hostPath:
            path: /root/docker/kubernetes/middleware/mysql/init
            type: Directory
