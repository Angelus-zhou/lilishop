apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: lilishop-middleware
  labels:
    app.kubernetes.io/name: mysql-secret
    app.kubernetes.io/instance: mysql-cluster
    app.kubernetes.io/version: "8.0.28"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lilishop
    tier: "middleware"
type: Opaque
data:
  password: lilishop

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-config
  namespace: lilishop-middleware
  labels:
    app.kubernetes.io/name: mysql-db-config
    app.kubernetes.io/instance: mysql-cluster
    app.kubernetes.io/version: "8.0.28"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lilishop
data:
  master.cnf: |
    # master configuration
    [mysqld]
    default-storage-engine=INNODB
    character-set-client-handshake=FALSE
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci
    init_connect='SET NAMES utf8mb4'
    group_concat_max_len=4294967295
    log-bin
    [client]
    default-character-set=utf8mb4
    [mysql]
    default-character-set=utf8mb4
  slave.cnf: |
    # slave configuration
    [mysqld]
    default-storage-engine=INNODB
    character-set-client-handshake=FALSE
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci
    init_connect='SET NAMES utf8mb4'
    group_concat_max_len=4294967295
    super-read-only
    [client]
    default-character-set=utf8mb4
    [mysql]
    default-character-set=utf8mb4

---
# Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: lilishop-middleware
  labels:
    app.kubernetes.io/name: mysql-service
    app.kubernetes.io/instance: mysql-cluster
    app.kubernetes.io/version: "8.0.28"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lilishop
    tier: "middleware"
spec:
  clusterIP: None
  ports:
    - name: mysql
      port: 3306
  selector:
    lilishop.service: mysql
---
# Client service for connecting to any MySQL instance for reads.
# For writes, you must instead connect to the primary: mysql-0.mysql.
apiVersion: v1
kind: Service
metadata:
  name: mysql-read
  namespace: lilishop-middleware
  labels:
    app.kubernetes.io/name: mysql-service
    app.kubernetes.io/instance: mysql-cluster
    app.kubernetes.io/version: "8.0.28"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lilishop
    tier: "middleware"
spec:
  ports:
    - name: "mysql"
      port: 3306
  selector:
    lilishop.service: mysql

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: mysql-cluster
    app.kubernetes.io/version: "8.0.28"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lilishop
    tier: "middleware"
  name: mysql
  namespace: lilishop-middleware
spec:
  serviceName: mysql
  replicas: 3
  selector:
    matchLabels:
      lilishop.service: mysql
  template:
    metadata:
      labels:
        lilishop.service: mysql
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:8.0.28
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Generate the server ID from the serial number of the Pod
              [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo [mysqld] > /mnt/conf.d/server-id.cnf
              # Since the server ID cannot be 0, add 100 to the ID to avoid it
              echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
              # If the serial number of Pod is 0, it indicates that it is a Master node. Copy the Master configuration file from ConfigMap to the / mnt/conf.d directory
              # Otherwise, copy the Slave configuration file in ConfigMap
              if [[ ${ordinal} -eq 0 ]]; then
                cp /mnt/config-map/master.cnf /mnt/conf.d
              else
                cp /mnt/config-map/slave.cnf /mnt/conf.d
              fi
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: config-map
              mountPath: /mnt/config-map
        - name: clone-mysql
          image: teracy/xtrabackup:2.4
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Skip the clone if data already exists.
              [[ -d /var/lib/mysql/mysql ]] && exit 0
              # Skip the clone on primary (ordinal index 0).
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              [[ $ordinal -eq 0 ]] && exit 0
              # Clone data from previous peer.
              ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
              # Prepare the backup.
              xtrabackup --prepare --target-dir=/var/lib/mysql
          volumeMounts:
            - name: mysql-data-volumes
              mountPath: /var/lib/mysql
              subPath: mysql
      containers:
        - name: mysql
          image: mysql:8.0.28
          ports:
            - name: mysql
              containerPort: 3306
          env:
            - name: MYSQL_DATABASE
              value: lilishop
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: TZ
              value: Asia/Shanghai
          command:
            - tail
            - "-f"
            - /dev/null
          # livenessProbe:
          #   exec:
          #     command: ["mysqladmin", "ping", "-uroot", "-plilishop"]
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          #   timeoutSeconds: 5
          # readinessProbe:
          #   exec:
          #     # Check we can execute queries over TCP (skip-networking is off).
          #     command:
          #       [
          #         "mysql",
          #         "-h",
          #         "127.0.0.1",
          #         "-u",
          #         "root",
          #         "-plilishop",
          #         "-e",
          #         "SELECT 1",
          #       ]
          #   initialDelaySeconds: 5
          #   periodSeconds: 2
          #   timeoutSeconds: 1
          volumeMounts:
            # 运行 mysql 容器时，docker-entrypoint.sh会检查 mysql 目录是否/var/lib/mysql存在。如果该目录不存在（第一次运行），它将运行 docker-entrypoint.sh 文件。
            - name: mysql-db-volumes
              mountPath: /docker-entrypoint-initdb.d
            - name: mysql-data-volumes
              mountPath: /var/lib/mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
        - name: xtrabackup
          image: teracy/xtrabackup:2.4
          ports:
            - name: xtrabackup
              containerPort: 3307
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          command:
            - bash
            - "-c"
            - |
              set -ex
              cd /var/lib/mysql
              # Read Master from backup information file_ LOG_ File and master_ LOG_ The values of the two POS fields are used to assemble the cluster and initialize SQL
              if [[ -f xtrabackup_slave_info ]]; then
                # If xtrabackup_ Slave_ The info file exists, indicating that the backup data comes from another Slave node
                # In this case, the XtraBackup tool has automatically generated the "CHANGE MASTER TO" SQL statement in this file during backup
                # So, just rename the file change_master_to.sql.in, which can be used directly later
                mv xtrabackup_slave_info change_master_to.sql.in
                # Therefore, there is no need for xtrabackup_binlog_info
                rm -f xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
                # If only xtrabackup exists_ binlog_ Info file, indicating that the backup comes from the Master node, you need to parse the backup information file and read the values of the two required fields
                [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                rm xtrabackup_binlog_info
                # Assemble the values of the two fields into SQL and write them to change_master_to.sql.in file
                echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                      MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
              fi
              # If change exists_ master_ To.sql.in, which means cluster initialization is required
              if [[ -f change_master_to.sql.in ]]; then
                # However, you must wait for the MySQL container to start before you can connect to MySQL in the next step
                echo "Waiting for mysqld to be ready(accepting connections)"
                until mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do sleep 1; done
                echo "Initializing replication from clone position"
                # Change file_ master_ Change the name of to.sql.in
                # Prevent the Container from restarting because change is found again_ master_ To.sql.in to repeat the initialization process
                mv change_master_to.sql.in change_master_to.sql.orig
                # Using change_ master_ The contents of to.sql.orig, that is, the SQL assembled earlier, form a complete SQL statement for initializing and starting Slave
                mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} << EOF
              $(< change_master_to.sql.orig),
                MASTER_HOST='mysql-0.mysql.mysql',
                MASTER_USER='root',
                MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}',
                MASTER_CONNECT_RETRY=10;
              START SLAVE;
              EOF
              fi
              # Use ncat to listen on port 3307.
              # Its function is to directly execute xtrabackup --backup command to back up MySQL data and send it to the requester when receiving the transmission request
              exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
                "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=${MYSQL_ROOT_PASSWORD}"
          volumeMounts:
            - name: mysql-data-volumes
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
      restartPolicy: Always
      volumes:
        - name: mysql-data-volumes
          hostPath:
            path: /root/docker/kubernetes/data/middleware/mysql
            type: Directory
        - name: conf
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql-db-config
        - name: mysql-db-volumes
          hostPath:
            path: /root/docker/kubernetes/middleware/mysql/init
            type: Directory
